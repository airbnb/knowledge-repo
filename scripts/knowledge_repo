#!/usr/bin/env python
from __future__ import print_function

import sys
import os
import itertools
import signal
import re
import threading
import webbrowser
import shutil
import argparse
import subprocess
from tabulate import tabulate
import click

import knowledge_repo  # nopep8
from knowledge_repo.repositories.gitrepository import GitKnowledgeRepository  # nopep8

def _click_exit_with_message(context, message, code=1):
    click.echo(message, err=True)
    context.exit(code)

def parse_repositories(context, param, values):
    prefix_pattern = re.compile('^(?:\{(?P<name>[a-zA-Z_0-9]*)\})?(?P<uri>.*)$')
    repos = {}
    for r in values:
        prefix = prefix_pattern.match(r)
        if not prefix:
            _click_exit_with_message(context, "Be sure to specify repositories in form {name}uri when specifying more than one repository.")
        name, uri = prefix.groups()
        if name in repos:
            _click_exit_with_message(context, "Multiple repositories with the name ({}) have been specified. Please ensure all referenced repositories have a unique name.".format(name))
        repos[name] = uri

    if None in repos:
        if len(repos) == 1: # Allow a unnamed repository if it's the only one.
            return repos[None]
        else:
            _click_exit_with_message(context, "Make sure you specify names for all repositories.".format(name))

    return repos


@click.group()
@click.option('--repo', callback=parse_repositories, help='The repository(ies) to use.', envvar='KNOWLEDGE_REPO', multiple=True, default=None, required=True)
@click.option('--knowledge-branch', help='The branch of the repository from which to source the knowledge_repo tools.', default='master')
@click.option('--dev', help='Whether to skip passing control to version of code checked out in knowledge repository.', is_flag=True)
@click.option('--debug', help='Whether to enable debug mode.', is_flag=True)
@click.option('--noupdate', help='Whether script should update the repository before performing actions.', default=True, type=click.BOOL)
@click.version_option(knowledge_repo.__version__, message='Local version: %(version)')
@click.pass_context
def cli(context, repo, knowledge_branch, dev, debug, noupdate):
    """Script to simplify management of the knowledge data repo."""
    if repo == None:
        _click_exit_with_message(context, "No repository specified. Please set the --repo flag, or the KNOWLEDGE_REPO environment variable.")
    context.obj = {}
    context.obj['dev'] = dev
    context.obj['repo'] = knowledge_repo.KnowledgeRepository.for_uri(repo)
    context.obj['debug'] = debug

    # Update repository so that we can ensure git repository configuration is up to date
    # We wrap this in a try/except block because failing to update a repository can
    # happen for all sorts of reasons that should not inhibit other actions
    # For example: if the repository does not exist and the action will be 'init'
    if not noupdate:
        try:
            kr = knowledge_repo.KnowledgeRepository.for_uri(repo)
            if isinstance(kr, GitKnowledgeRepository):
                kr.update(branch=knowledge_branch)
        except:
            pass

    # If not running in dev mode, and the specified repo exists, along with a knowledge_repo
    # script in the .resources/scripts folder, pass execution to this script in the
    # knowledge data repo. If this *is* that script, do nothing. This still allows the `init`
    # action to be run by this script in any case. Instances of this script in a data repo
    # are assumed to be in the: '.resources/scripts/knowledge_repo', and be part of a checked
    # out instance of the complete "knowledge-repo" repository.
    if (isinstance(repo, str) and not dev
            and os.path.exists(os.path.join(repo, '.resources', 'scripts', 'knowledge_repo'))
            and os.path.abspath(repo) != os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))):
        cmdline_args = ['--noupdate'] + [arg.replace(' ', '\ ') for arg in sys.argv[1:]]
        subprocess.call('{} {}'.format(os.path.join(os.path.abspath(repo), '.resources/scripts/knowledge_repo'), ' '.join(cmdline_args)), shell=True)
        context.exit(0)

@cli.command()
@click.option('--tooling-embed', help='Embed a reference version knowledge_repo tooling in the repository.', is_flag=True)
@click.option('--tooling-repo', help='The repository to use (if not the default).')
@click.option('--tooling-branch', help='The branch to use when embedding the tools as a submodule (default is "master").')
@click.pass_context
def init(context, tooling_embed, tooling_repo, tooling_branch):
    """Initialise a new git knowledge repository."""
    repo = context.obj['repo']
    if tooling_embed:
        embed_tooling = {}
        if tooling_repo is not None:
            embed_tooling['repository'] = tooling_repo
        if tooling_branch is not None:
            embed_tooling['branch'] = tooling_branch
    else:
        embed_tooling = False
    kr = knowledge_repo.KnowledgeRepository.create_for_uri(repo, embed_tooling=embed_tooling)
    if kr is not None:
        click.echo("Knowledge repository created for uri `{}`.".format(kr.uri))
    context.exit(0)


@cli.command()
@click.argument('format', type=click.Choice(['ipynb', 'Rmd', 'md']))
@click.argument('filename')
@click.pass_context
def create(context, format, filename):
    """Start a new knowledge post based on a template."""
    repo = context.obj['repo']
    src = os.path.join(os.path.dirname(knowledge_repo.__file__), 'templates', 'knowledge_template.{}'.format(format))
    if os.path.exists(filename):
        context.fail("File already exists at '{}'. Please choose a different filename and try again.".format(filename))
    shutil.copy(src, filename)
    click.echo("Created a {format} knowledge post template at {filename}.".format(format=format, filename=filename))
    context.exit(0)


@cli.command()
@click.pass_context
def drafts(context):
    """Show the posts which have local work that has not been published upstream."""
    repo = context.obj['repo']
    statuses = repo.post_statuses(repo.dir(status=[repo.PostStatus.DRAFT, repo.PostStatus.SUBMITTED, repo.PostStatus.UNPUBLISHED]), detailed=True)
    click.echo(tabulate([[path, status.name, details] for path, (status, details) in statuses.items()], ['Post', 'Status', 'Details'], 'fancy_grid'))
    context.exit(0)

@cli.command()
@click.pass_context
def status(context):
    """Provide information on the state of the repository. Useful mainly for debugging."""
    repo = context.obj['repo']
    status = repo.status_message
    if isinstance(repo, dict):
        click.echo("\n-----\n".join(['Repository: {name}\n{message}'.format(name=name, message=message) for name, message in status.items()]))
    else:
        click.echo(repo.status_message)
    context.exit(0)


@cli.command()
@click.argument('filename')
@click.option('-p', '--path', help='The path of the destination post to be added in the knowledge repo. Required if the knowledge post does not specify "path" in its headers.')
@click.option('--update', help='Whether this should update an existing post of the same name.', is_flag=True)
@click.option('--branch', help='The branch to use for this addition, if not the default (which is the path of the knowledge post).')
@click.option('--squash', help='Automatically suppress all previous commits, and replace it with this version.', is_flag=True)
@click.option('--submit', help='Submit newly added post', is_flag=True)
@click.option('-m', '--message', help='The commit message to be used when committing into the repo.')
@click.option('--src', multiple=True, help='Specify additional source files to add to <knowledge_post>/orig_src.')
@click.pass_context
def add(context, filename, path, update, branch, squash, submit, message, src):
    """Add a knowledge post to the repository based on the supplied file. Can be a *.ipynb, *.Rmd, or *.md file."""
    repo = context.obj['repo']
    kp = knowledge_repo.KnowledgePost.from_file(filename, src_paths=src)
    repo.add(kp, path=path, update=update, branch=branch, message=message, squash=squash)
    if submit:
        repo.submit(path=path)
    context.exit(0)


@cli.command()
@click.argument('path')
@click.pass_context
def submit(context, path):
    """Submit a knowledge post for review."""
    repo = context.obj['repo']
    repo.submit(path=path)
    context.exit(0)

@cli.command()
@click.argument('path')
@click.pass_context
def push(context, path):
    """DEPRECATED: Use `submit` instead."""
    click.echo("WARNING: The `push` action is deprecated, and you are encouraged to use `knowledge_repo submit <path>` instead.")
    repo = context.obj['repo']
    repo.submit(path=path)
    context.exit(0)


@cli.command()
@click.argument('path')
@click.option('--port', default=7000, help="Specify the port on which to run the web server", type=click.INT)
@click.option('--dburi', help='The SQLAlchemy database uri.')
@click.option('--config', default=None)
@click.pass_context
def preview(context, path, port, dburi, config):
    """Run the knowledge repo app, and preview the specified post. It is assumed it is available on the currently checked out branch."""
    repo = context.obj['repo']
    debug = context.obj['debug']
    app = repo.get_app(debug=debug,
                       db_uri=dburi,
                       config=config,
                       REPOSITORY_INDEXING_ENABLED=False)

    kp_path = repo._kp_path(path)
    repo.set_active_draft(kp_path)  # TODO: Deprecate
    url = 'http://127.0.0.1:{}/render?markdown={}'.format(port, kp_path)
    threading.Timer(1.25, lambda: webbrowser.open(url)).start()
    threaded = True
    uris = []
    def get_uris(uri):
        if isinstance(uri, str):
            uris.append(uri)
            return
        elif isinstance(uri, knowledge_repo.KnowledgeRepository):
            get_uris(uri.uri)
        elif isinstance(uri, dict):
            for u in uri.values():
                get_uris(u)
    get_uris(repo)
    for u in itertools.chain(uris, [app.config['SQLALCHEMY_DATABASE_URI']]):
        if ':memory:' in u or u.startswith('sqlite://:'):
            use_reloader = False
            threaded = False
            break

    app.run(debug=debug,
            host='0.0.0.0',
            port=port,
            use_reloader=use_reloader,
            threaded=threaded)
    context.exit(0)


@cli.command()
@click.option('--port', default=7000, type=click.INT, help="Specify the port on which to run the web server")
@click.option('--dburi', help='The SQLAlchemy database uri.')
@click.option('--config', default=None)
@click.pass_context
def runserver(context, port, dburi, config):
    """Run the knowledge repo app."""
    repo = context.obj['repo']
    debug = context.obj['debug']
    app = repo.get_app(debug=debug,
                       db_uri=dburi,
                       config=config,
                       REPOSITORY_INDEXING_ENABLED=True)


    use_reloader = debug
    threaded = True
    # Check if in-memory databases are being used, and if so, avoid using threading
    uris = []
    def get_uris(uri):
        if isinstance(uri, str):
            uris.append(uri)
            return
        elif isinstance(uri, knowledge_repo.KnowledgeRepository):
            get_uris(uri.uri)
        elif isinstance(uri, dict):
            for u in uri.values():
                get_uris(u)
    get_uris(repo)
    for u in itertools.chain(uris, [app.config['SQLALCHEMY_DATABASE_URI']]):
        if ':memory:' in u or u.startswith('sqlite://:'):
            use_reloader = False
            threaded = False
            break

    app.run(debug=debug,
            host='0.0.0.0',
            port=port,
            use_reloader=use_reloader,
            threaded=threaded)

@cli.command()
@click.option('-p', '--port', default=7000, type=click.INT, help="Specify the port on which to run the web server")
@click.option('-w', '--workers', default=4, type=click.INT, help="Number of gunicorn worker threads to spin up.")
@click.option('-t', '--timeout', default=60, type=click.INT, help="Specify the timeout (seconds) for the gunicorn web server")
@click.option('-db', '--dburi', help='The SQLAlchemy database uri.')
@click.option('-c', '--config', default=None, help="The config file from which to read server configuration.")
@click.pass_context
def deploy(context, port, workers, timeout, dburi, config):
    """Deploy the knowledge repo app using gunicorn."""
    repo = context.obj['repo']
    debug = context.obj['debug']

    import tempfile
    tmp_dir = tempfile.mkdtemp()
    tmp_path = os.path.join(tmp_dir, 'server.py')

    kr_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

    if isinstance(repo.uri, str):
        uris = "'{}'".format(repo.uri.replace("'", "\\'"))
    else:
        uris = str({prefix: repo.uri for prefix, repo in repo.uri.items()})

    db_uri = "'{}'".format(dburi.replace("'", "\\'")) if isinstance(dburi, str) else str(dburi)

    with open(tmp_path, 'w') as f:
        f.write('''
import sys
sys.path.insert(0, '{}')
import knowledge_repo
app = knowledge_repo.KnowledgeRepository.for_uri({}).get_app(db_uri={}, debug={}, config={})
        '''.format(kr_path, uris, db_uri, str(debug),
                   '"' + os.path.abspath(config) + '"' if config is not None else "None",
                   repo))

    try:
        # Run gunicorn server
        cmd = "cd {}; gunicorn -w {} --timeout {} -b 0.0.0.0:{} server:app"
        cmd = cmd.format(tmp_dir, workers, timeout, port)
        # logger.info("Starting server with command:  " + " ".join(cmd))
        subprocess.check_output(cmd, shell=True)
    finally:
        shutil.rmtree(tmp_dir)

@cli.command()
@click.option('-db', '--dburi', help='The SQLAlchemy database uri.')
@click.option('-c', '--config', default=None, help="The config file from which to read server configuration.")
@click.option('-m', '--message', help="The message to use for the database revision.")
@click.option('--autogenerate', help="Whether alembic should automatically populate the migration script.", is_flag=True)
@click.pass_context
def db_upgrade(context, dburi, config, message, autogenerate):
    """Upgrade the database to the latest schema. Only necessary if you have disabled automatic migrations in your deployment."""
    repo = context.obj['repo']
    debug = context.obj['debug']
    app = repo.get_app(db_uri=dburi, debug=debug, config=config)
    app.db_upgrade()


@cli.command()
@click.argument('message')
@click.option('-db', '--dburi', help='The SQLAlchemy database uri.')
@click.option('--autogenerate', help="Whether alembic should automatically populate the migration script.", is_flag=True)
@click.pass_context
def db_migrate(context, message, dburi, autogenerate):
    """Create a new alembic revision."""
    dev = context.obj['dev']
    debug = context.obj['debug']
    if dev and os.path.exists(os.path.join(os.path.dirname(__file__), '..', '.git')):
        app = repo.get_app(debug=debug, db_uri=dburi)
        app.db_migrate(message, autogenerate=autogenerate)


def main():
    # Register handler for SIGTERM, so we can run cleanup code if we are terminated
    signal.signal(signal.SIGTERM, lambda signum, frame: sys.exit(0))

    # If this script is being run out of a checked out repository, we need to make sure
    # the appropriate knowledge_repo is being used. To do this, we add the parent directory
    # of the folder containing this script if it contains a python package named "knowledge_repo".
    script_dir = os.path.dirname(__file__)
    if os.path.exists(os.path.join(os.path.dirname(script_dir), 'knowledge_repo', '__init__.py')):
        sys.path.insert(0, os.path.join(script_dir, '..'))

    # If there's a contrib folder, add this as well and import it
    contrib_dir = os.path.join(os.path.dirname(__file__), os.pardir, 'contrib')
    if os.path.exists(os.path.join(contrib_dir, '__init__.py')):
        sys.path.insert(0, os.path.join(contrib_dir, '..'))

    cli()

if __name__ == '__main__':
    main()
